#!/bin/bash
#
# Build CoreConfig & Associated Cert Generation
#

. $NVM_DIR/nvm.sh

set -euo pipefail

echo "ok - TAK Server - New ECS Task starting..."
echo "ok - NodeJS - Version: $(node --version)"

# Ensure TAK certs Directory is present
if [ -d "/opt/tak/certs/files/" ]; then
    mkdir -p "/opt/tak/certs/files/"
fi

# Attempt to restore Certbot Cronjob or save it, if it exists
echo "ok - Certbot - Restoring cronjob"
if [ ! -e "/etc/cron.d/certbot" ]; then
    cp /etc/letsencrypt/certbot.cron /etc/cron.d/certbot || true
else
    cp /etc/cron.d/certbot /etc/letsencrypt/certbot.cron || true
fi

cd /opt/tak/certs

mkdir -p "/opt/tak/certs/files/${HostedDomain}/" || true

echo "ok - Root CA - Checking for AWS Secrets Manager Secret"
ROOT_CA_PUBLIC=$(aws secretsmanager get-secret-value --secret-id coe-tak-network-${Environment}/root-ca/public 2> /dev/null) || $(echo "")
ROOT_CA_PUBLIC_TRUSTED=$(aws secretsmanager get-secret-value --secret-id coe-tak-network-${Environment}/root-ca/public-trusted 2> /dev/null) || $(echo "")
ROOT_CA_PRIVATE=$(aws secretsmanager get-secret-value --secret-id coe-tak-network-${Environment}/root-ca/private 2> /dev/null) || $(echo "")
ROOT_CA_REVOKE=$(aws secretsmanager get-secret-value --secret-id coe-tak-network-${Environment}/root-ca/revoke 2> /dev/null) || $(echo "")

if [[ -n ${ROOT_CA_PUBLIC} ]]; then
    echo "ok - Root CA - Found in AWS Secrets Manager"
    echo "${ROOT_CA_PUBLIC}" > "/opt/tak/certs/files/ca.pem"
fi

if [[ -n ${ROOT_CA_PUBLIC_TRUSTED} ]]; then
    echo "ok - Root CA Trusted - Found in AWS Secrets Manager"
    echo "${ROOT_CA_PUBLIC_TRUSTED}" > "/opt/tak/certs/files/ca-trusted.pem"
fi

if [[ -n ${ROOT_CA_PRIVATE} ]]; then
    echo "ok - Root CA Private - Found in AWS Secrets Manager"
    echo "${ROOT_CA_PRIVATE}" > "/opt/tak/certs/files/ca-do-not-share.key"
fi

if [[ -n ${ROOT_CA_REVOKE} ]]; then
    echo "ok - Root CA Revoke - Found in AWS Secrets Manager"
    echo "${ROOT_CA_REVOKE}" > "/opt/tak/certs/files/ca.crl"
fi

if [[ -n ${ROOT_CA_PUBLIC} ]] && [[ -n ${ROOT_CA_PUBLIC_TRUSTED} ]] && [[ -n ${ROOT_CA_PRIVATE} ]] && [[ -n ${ROOT_CA_REVOKE} ]]; then
    echo "ok - Root CA - Generating New Certificate"
    /opt/tak/certs/cert-metadata.sh
    /opt/tak/certs/makeRootCa.sh --ca-name ${StackName:-TAKServer}

    aws secretsmanager put-secret-value \
        --secret-id "coe-tak-network-${Environment}/root-ca/public" \
        --secret-binary fileb://files/ca.pem|| true

    aws secretsmanager put-secret-value \
        --secret-id "coe-tak-network-${Environment}/root-ca/public-trusted" \
        --secret-binary fileb://files/ca-trusted.pem|| true

    aws secretsmanager put-secret-value \
        --secret-id "coe-tak-network-${Environment}/root-ca/private" \
        --secret-binary fileb://files/ca-do-not-share.key || true

    aws secretsmanager put-secret-value \
        --secret-id "coe-tak-network-${Environment}/root-ca/revoke" \
        --secret-binary fileb://files/ca.crl || true
fi

# Check if TAK certs exist, otherwise generate them
if [ ! -f "/opt/tak/certs/files/ca.pem" ]; then
    { yes || :; } | /opt/tak/certs/makeCert.sh ca intermediate-ca
    { yes || :; } | /opt/tak/certs/makeCert.sh server takserver
    { yes || :; } | /opt/tak/certs/makeCert.sh client admin

    aws secretsmanager put-secret-value \
        --secret-id coe-tak-network-${Environment}/tak-admin-cert \
        --secret-binary fileb://files/admin.p12 || true
fi

ROOT_CA_REVOKE=$(aws secretsmanager get-secret-value --secret-id coe-tak-network-cotak-staging/root-ca/revoke 2> /dev/null || "")

# Restore LetsEncrypt cert
# If no previous LetsEncrypt certs exist, use the self-signed ones
if [ ! -f "/opt/tak/certs/files/${HostedDomain}/letsencrypt.jks" ]; then
    if [ -d "/etc/letsencrypt/live/${HostedDomain}" ]; then
        # Previous LetsEncrypt cert exists, convert it
        echo "ok - TAK Server - Converting LetsEncrypt certs to TAK format"
        openssl x509 \
            -text \
            -in "/etc/letsencrypt/live/${HostedDomain}/fullchain.pem" \
            -noout

        openssl pkcs12 \
            -export \
            -in "/etc/letsencrypt/live/${HostedDomain}/fullchain.pem" \
            -inkey "/etc/letsencrypt/live/${HostedDomain}/privkey.pem" \
            -out "/opt/tak/certs/files/${HostedDomain}/letsencrypt.p12" \
            -name "${HostedDomain}" \
            -password "pass:atakatak"

        keytool \
            -importkeystore \
            -srcstorepass "atakatak" \
            -deststorepass "atakatak" \
            -destkeystore "/opt/tak/certs/files/${HostedDomain}/letsencrypt.jks" \
            -srckeystore "/opt/tak/certs/files/${HostedDomain}/letsencrypt.p12" \
            -srcstoretype "pkcs12"
    else
        # No previous LetsEncrypt cert exists, use the self-signed one
        echo "ok - TAK Server - Using self-signed certs instead of LetsEncrypt certs"
        cp /opt/tak/certs/files/takserver.jks /opt/tak/certs/files/${HostedDomain}/letsencrypt.jks || true
    fi
fi

# Request LetsEncrypt certs in background
/opt/tak/letsencrypt-request-cert.sh &

echo "ok - TAK Server - Generating config file"
cd /opt/tak
node CoreConfig.js

/opt/tak/validateConfig.sh /opt/tak/CoreConfig.xml

java -jar /opt/tak/db-utils/SchemaManager.jar validate
java -jar /opt/tak/db-utils/SchemaManager.jar upgrade

echo "ok - TAK Server - Starting server"
/opt/tak/configureInDocker.sh init &

echo "ok - TAK Server - Starting to elevate admin user privileges..."
SetAdminCommand="java -jar /opt/tak/utils/UserManager.jar certmod -A /opt/tak/certs/files/admin.pem"
while ! $SetAdminCommand; do
   echo "not ok - TAK Server - Elevating admin user privileges failed, retrying in 10 seconds..."
   sleep 10
done
echo "ok - TAK Server - Elevating admin user privileges succeeded"

echo "ok - TAK Server - New ECS Task successfully started"

# Run cron in foreground
echo "ok - Certbot - Starting cron for certbot renewals"
/usr/sbin/cron -f
